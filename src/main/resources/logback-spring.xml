<?xml version="1.0" encoding="UTF-8"?>
<!-- 60초마다 설정 파일의 변경을 확인 하여 변경시 갱신 -->
<configuration scan="true" scanPeriod="60 seconds">

	<!-- application 설정파일 읽어오기(환경별로) -->
	<property resource="application.properties" />

	<!-- 로그 패턴에 색상 적용 %clr(pattern){color} -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    
    <!-- Console 설정 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>[%d{yy-MM-dd HH:mm:ss}] %clr(%-5level) --- [%thread] %clr(%-50.50logger{36}:%line){cyan} : %msg%n</pattern>
        </encoder>
    </appender>

    <!-- root레벨 설정 -->
    <root level="INFO">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="FILE_INFO"/>
        <!-- <appender-ref ref="Error"/> -->
    </root>
    
    <!-- log 기록 절대 위치 설정 -->
    <property name="LOGS_ABSOLUTE_PATH" value="./logs" />
    
    <!-- 파일(FILE) -->
    <appender name="FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--     log 기록할 파일 위치 설정 -->
        <file>${LOGS_ABSOLUTE_PATH}/logFile-error.log</file>
        <!--     log 기록 타입 인코딩 -->
        <encoder>
            <pattern>[%d{yy-MM-dd HH:mm:ss}] %-5level --- [%thread] %-50.50logger{36}:%line : %msg%n</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- daily rollover -->
            <fileNamePattern>${LOGS_ABSOLUTE_PATH}/logFile-error.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- keep 30 days' worth of history capped at 3GB total size -->
            <maxHistory>30</maxHistory>
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
    </appender>
    
    <appender name="FILE_INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--     log 기록할 파일 위치 설정 -->
        <file>${LOGS_ABSOLUTE_PATH}/logFile-info.log</file>
        <!--     log 기록 타입 인코딩 -->
        <encoder>
            <pattern>[%d{yy-MM-dd HH:mm:ss}] %-5level --- [%thread] %-50.50logger{36}:%line : %msg%n</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- daily rollover -->
            <fileNamePattern>${LOGS_ABSOLUTE_PATH}/logFile-info.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- keep 30 days' worth of history capped at 3GB total size -->
            <maxHistory>10</maxHistory>
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
    </appender>
    
    <logger name="org.apache.catalina" level="ERROR">
	    <appender-ref ref="FILE_ERROR"/>
    </logger>
    
    <!-- log4jdbc 옵션 설정 -->
	<logger name="jdbc" level="OFF"/>
	<!-- 커넥션 open close 이벤트를 로그로 남긴다. -->
	<logger name="jdbc.connection" level="ERROR"/>
	<!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. -->
	<logger name="jdbc.sqlonly" level="OFF" /> 
	<!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
	<logger name="jdbc.sqltiming" level="ERROR" />
	<!-- Connection, ResultSet, Statement 객체와 관련된 모든 JDBC 호출을 로깅합니다. ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. -->
	<logger name="jdbc.audit" level="OFF"/>
	<!-- ResultSet 메타데이터를 포함한 모든 ResultSet 작업을 로깅합니다. ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
	<logger name="jdbc.resultset" level="OFF"/>
	<!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. -->
	<logger name="jdbc.resultsettable" level="OFF"/>
	
	<!-- 커넥션풀 상태 log-->
<!--  	<logger name="com.zaxxer.hikari.pool.PoolBase" level="ERROR"/>
    <logger name="com.zaxxer.hikari.pool.HikariPool" level="ERROR"/>
    <logger name="com.zaxxer.hikari.HikariDataSource" level="ERROR"/> -->
	
	<logger name="com.zaxxer.hikari.HikariConfig" level="DEBUG"/>
	<logger name="com.zaxxer.hikari" level="ERROR"/>
</configuration>